fastlane_version '2.140.0'

def underscore (string)
  return string.gsub(/::/, '/').
  gsub(/([A-Z]+)([A-Z][a-z])/,'\1_\2').
  gsub(/([a-z\d])([A-Z])/,'\1_\2').
  tr("-", "_").
  tr(".", "_").
  upcase
end

def getCLIArgEnvName (argName)
  return "CLI_ARG_" + underscore(argName) + "_{{CLI_BUILD_ID}}";
end

platform :ios do
 before_all do
   setup_circle_ci
 end

 desc 'Build the iOS application.'
 lane :build do
  nativescriptCLICommand = ["tns", "prepare", "ios"];
  shouldPublish = ENV[getCLIArgEnvName("env.cloudPublish")] == "1";
  inRelease = ENV[getCLIArgEnvName("release")] == "1";
  isForDevice = ENV[getCLIArgEnvName("forDevice")] == "1";
  if inRelease
    nativescriptCLICommand.push("--release");
  end

  logEnvVar = getCLIArgEnvName("log");
  if ENV[logEnvVar]
    nativescriptCLICommand.push("--log", "\"$#{logEnvVar}\"");
  end
  
  defaultProvisionType = inRelease ? "appstore" : "development";
  defaultBuildType = inRelease ? "app-store" : "development";
  defaultBuildConfiguration = inRelease ? "Release" : "Debug";
  provisionType = ENV["IOS_PROVISION_TYPE_{{CLI_BUILD_ID}}"] || defaultProvisionType;
  buildType = ENV["IOS_BUILD_TYPE_{{CLI_BUILD_ID}}"] || defaultBuildType;
  buildConfiguration = ENV["IOS_BUILD_CONFIGURATION_{{CLI_BUILD_ID}}"] || defaultBuildConfiguration;
  
  # TODO: move config here instead of matchfile?
  match(
    type: provisionType,
    app_identifier: "{{PROJECT_ID}}"
  )

  matchProvisionName = ENV["sigh_org.nativescript.cloudTest_#{provisionType}"];
  nativescriptCLICommand.push("--provision", "\"#{matchProvisionName}\"")
  
  sh(nativescriptCLICommand);

  gym(
    scheme: "{{PROJECT_NAME}}",
    workspace: File.join("{{NATIVE_PROJECT_ROOT}}", "{{PROJECT_NAME}}.xcworkspace"),
    export_method: buildType,
    configuration: buildConfiguration,
    destination: isForDevice ? 'generic/platform=iOS' : 'generic/platform=iOS Simulator',
    skip_package_ipa: !isForDevice,
    archive_path: File.expand_path('~/fl_output/{{PROJECT_NAME}}'),
    output_directory: File.expand_path('~/fl_output')
  )

  if (!isForDevice)
    zip(
      path: File.expand_path("~/fl_output/{{PROJECT_NAME}}.xcarchive/Products/Applications/{{PROJECT_NAME}}.app"),
      output_path: File.expand_path("~/fl_output/{{PROJECT_NAME}}.app.zip")
    )
  end

  if (shouldPublish)
    upload_to_testflight(
      skip_submission: true,
      # TODO: or app-specific
      username: ENV["IOS_APPLE_ID"],
      app_identifier: "{{PROJECT_ID}}",
      apple_id: ENV["IOS_APPSTORE_CONNECT_APP_ID_{{CLI_BUILD_ID}}"],
      ipa: "~/fl_output/{{PROJECT_NAME}}.ipa",
      skip_waiting_for_build_processing: true
    )
  end
 end

end