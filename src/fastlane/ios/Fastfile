fastlane_version '2.140.0'

def underscore (string)
  return string.gsub(/::/, '/').
  gsub(/([A-Z]+)([A-Z][a-z])/,'\1_\2').
  gsub(/([a-z\d])([A-Z])/,'\1_\2').
  tr("-", "_").
  upcase
end

def getCLIArgEnvName (argName)
  return "CLI_ARG_" + underscore(argName) + "_{{CLI_BUILD_ID}}";
end

platform :ios do
 before_all do
   setup_circle_ci
 end

 desc 'Build the iOS application.'
 lane :build do
    disable_automatic_code_signing(
      path: "{{IOS_XCODE_PROJ_PATH}}"
    )

    MY_APP_ID = "{{PROJECT_ID}}"
    MY_PROFILE = "{{IOS_DEV_PROVISION_NAME}}"
    MY_TEAM = "{{IOS_TEAM_ID}}"

    match(
        type: "{{IOS_BUILD_TYPE}}"
    )

    settings_to_override = {
      :PROVISIONING_PROFILE_SPECIFIER => MY_PROFILE,
      :DEVELOPMENT_TEAM => MY_TEAM,
    }

    nativescriptCLICommand = ["tns", "prepare", "ios"];
    if ENV[getCLIArgEnvName("release")]
      nativescriptCLICommand.push("--release");
    end

    logEnvVar = getCLIArgEnvName("log");
    if ENV[logEnvVar]
      nativescriptCLICommand.push("--log", "\"$#{logEnvVar}\"");
    end
    
    sh(nativescriptCLICommand);

    gym(
      scheme: "{{PROJECT_NAME}}",
      workspace: "{{IOS_XCODE_WORKSPACE_PATH}}",
      export_method: '{{IOS_BUILD_TYPE}}',
      configuration: "{{IOS_BUILD_CONFIGURATION}}",
      destination: {{IOS_BUILD_FOR_SIMULATOR}} ? 'generic/platform=iOS Simulator' : 'generic/platform=iOS',
      skip_package_ipa: {{IOS_BUILD_FOR_SIMULATOR}} ? true : false,
      archive_path: File.expand_path('~/fl_output/{{PROJECT_NAME}}'),
      xcargs: settings_to_override,
    )

    if ({{IOS_BUILD_FOR_SIMULATOR}})
      zip(
        path: File.expand_path("~/fl_output/{{PROJECT_NAME}}.xcarchive/Products/Applications/{{PROJECT_NAME}}.app"),
        output_path: File.expand_path("~/fl_output/{{PROJECT_NAME}}.app.zip")
      )
    end
 end

end