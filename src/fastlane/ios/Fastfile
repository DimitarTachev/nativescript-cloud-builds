fastlane_version '2.140.0'

def underscore (string)
  return string.gsub(/::/, '/').
  gsub(/([A-Z]+)([A-Z][a-z])/,'\1_\2').
  gsub(/([a-z\d])([A-Z])/,'\1_\2').
  tr("-", "_").
  tr(".", "_").
  upcase
end

def getCLIArgEnvName (argName)
  return "CLI_ARG_" + underscore(argName) + "_{{CLI_BUILD_ID}}";
end

platform :ios do
 before_all do
   setup_circle_ci
 end

 desc 'Build the iOS application.'
 lane :build do
  nativescriptCLICommand = ["tns", "prepare", "ios"];
  if ENV[getCLIArgEnvName("release")]
    nativescriptCLICommand.push("--release");
  end

  logEnvVar = getCLIArgEnvName("log");
  if ENV[logEnvVar]
    nativescriptCLICommand.push("--log", "\"$#{logEnvVar}\"");
  end
  
  sh(nativescriptCLICommand);

    disable_automatic_code_signing(
      path: "{{IOS_XCODE_PROJ_PATH}}"
    )

    match(
        type: "{{IOS_PROVISION_TYPE}}"
    )

    settings_to_override = {
      :PROVISIONING_PROFILE_SPECIFIER => "{{IOS_DEV_PROVISION_NAME}}",
      :DEVELOPMENT_TEAM => "{{IOS_TEAM_ID}}"
    }

    gym(
      scheme: "{{PROJECT_NAME}}",
      workspace: "{{IOS_XCODE_WORKSPACE_PATH}}",
      export_method: '{{IOS_BUILD_TYPE}}',
      configuration: "{{IOS_BUILD_CONFIGURATION}}",
      destination: {{IOS_BUILD_FOR_SIMULATOR}} ? 'generic/platform=iOS Simulator' : 'generic/platform=iOS',
      skip_package_ipa: {{IOS_BUILD_FOR_SIMULATOR}} ? true : false,
      archive_path: File.expand_path('~/fl_output/{{PROJECT_NAME}}'),
      xcargs: settings_to_override,
    )

    if ({{IOS_BUILD_FOR_SIMULATOR}})
      zip(
        path: File.expand_path("~/fl_output/{{PROJECT_NAME}}.xcarchive/Products/Applications/{{PROJECT_NAME}}.app"),
        output_path: File.expand_path("~/fl_output/{{PROJECT_NAME}}.app.zip")
      )
    end

    if ({{IOS_PUBLISH_TO_TESTFLIGHT}})
      upload_to_testflight(
        skip_submission: true,
        apple_id: "1497136415",
        app_identifier: "{{PROJECT_ID}}",
        ipa: "~/fl_output/{{PROJECT_NAME}}.ipa",
        skip_waiting_for_build_processing: true
      ) 
    end
 end

end